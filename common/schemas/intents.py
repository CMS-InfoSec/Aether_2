"""Shared schemas for intent, order, and risk domain objects."""

from __future__ import annotations

from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Intent(BaseModel):
    """Represents a trading intent generated by upstream models."""

    model_config = ConfigDict(
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "action": "OPEN",
                "side": "BUY",
                "qty": 1.25,
                "type": "LIMIT",
                "limit_px": 28500.5,
                "tif": "GTC",
                "tp": 29100.0,
                "sl": 27950.0,
                "trailing": 150.0,
                "expected_edge_bps": 45.0,
                "expected_cost_bps": 8.5,
                "confidence": 0.82,
            }
        },
    )

    action: str = Field(..., min_length=1, max_length=32, description="Intent action label")
    side: str = Field(
        ...,
        pattern=r"^(BUY|SELL)$",
        description="Trade direction for the intent",
    )
    qty: float = Field(..., gt=0.0, description="Order quantity associated with the intent")
    type: str = Field(
        ...,
        pattern=r"^(MARKET|LIMIT)$",
        description="Execution type for the intent",
    )
    limit_px: Optional[float] = Field(
        None,
        gt=0.0,
        description="Limit price to use when type is LIMIT",
    )
    tif: Optional[str] = Field(
        None,
        pattern=r"^(GTC|IOC|FOK|DAY)$",
        description="Time-in-force constraint",
    )
    tp: Optional[float] = Field(
        None,
        gt=0.0,
        description="Take-profit target price or distance",
    )
    sl: Optional[float] = Field(
        None,
        gt=0.0,
        description="Stop-loss target price or distance",
    )
    trailing: Optional[float] = Field(
        None,
        gt=0.0,
        description="Trailing offset applied to stop or take-profit orders",
    )
    expected_edge_bps: float = Field(
        ...,
        description="Expected gross edge in basis points",
    )
    expected_cost_bps: float = Field(
        ...,
        ge=0.0,
        description="Expected transaction cost in basis points",
    )
    confidence: float = Field(
        ...,
        ge=0.0,
        le=1.0,
        description="Confidence score between 0 and 1",
    )


class Order(BaseModel):
    """Represents the lifecycle state of an order submitted to an exchange."""

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "client_id": "order-123",
                "account_id": "acct-001",
                "symbol": "BTC-USD",
                "status": "FILLED",
                "ts": "2024-03-05T12:34:56Z",
            }
        }
    )

    client_id: str = Field(..., min_length=1, max_length=64, description="Client provided order id")
    account_id: str = Field(..., min_length=1, max_length=64, description="Owning account identifier")
    symbol: str = Field(..., min_length=1, max_length=32, description="Trading symbol")
    status: str = Field(
        ...,
        pattern=r"^(NEW|WORKING|FILLED|PARTIALLY_FILLED|CANCELLED|REJECTED)$",
        description="Current status of the order",
    )
    ts: datetime = Field(..., description="Timestamp of the latest status change")


class Fill(BaseModel):
    """Details of an execution fill received from an exchange."""

    model_config = ConfigDict(
        json_schema_extra={
            "example": {
                "exchange_order_id": "exch-789",
                "account_id": "acct-001",
                "symbol": "ETH-USD",
                "qty": 0.5,
                "price": 1820.25,
                "fee": 0.45,
                "liquidity": "TAKER",
                "ts": "2024-03-05T12:35:10Z",
            }
        }
    )

    exchange_order_id: str = Field(
        ...,
        min_length=1,
        max_length=64,
        description="Identifier assigned by the exchange",
    )
    account_id: str = Field(..., min_length=1, max_length=64, description="Owning account identifier")
    symbol: str = Field(..., min_length=1, max_length=32, description="Trading symbol")
    qty: float = Field(..., gt=0.0, description="Executed quantity")
    price: float = Field(..., gt=0.0, description="Execution price")
    fee: float = Field(..., ge=0.0, description="Fee charged for the fill")
    liquidity: str = Field(
        ...,
        pattern=r"^(MAKER|TAKER)$",
        description="Indicates maker or taker side of the fill",
    )
    ts: datetime = Field(..., description="Timestamp when the fill occurred")


class RiskResult(BaseModel):
    """Outcome of running risk validation for a trading intent."""

    model_config = ConfigDict(
        populate_by_name=True,
        json_schema_extra={
            "example": {
                "pass": True,
                "reasons": [],
                "adjusted_qty": 0.85,
                "cooldown": "2024-03-05T12:40:00Z",
            }
        },
    )

    pass_: bool = Field(
        ...,
        alias="pass",
        serialization_alias="pass",
        description="Whether the risk checks were satisfied",
    )
    reasons: List[str] = Field(
        default_factory=list,
        description="List of reasons when the risk checks fail",
    )
    adjusted_qty: Optional[float] = Field(
        None,
        gt=0.0,
        description="Quantity permitted after applying risk adjustments",
    )
    cooldown: Optional[datetime] = Field(
        None,
        description="Timestamp until which trading should be paused",
    )

