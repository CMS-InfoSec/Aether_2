apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8srequiredimagerevision
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredImageRevision
      validation:
        openAPIV3Schema:
          type: object
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8srequiredimagerevision

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          endswith(container.image, ":latest")
          msg := sprintf("image %s uses forbidden tag :latest", [container.image])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          endswith(container.image, ":latest")
          msg := sprintf("init container image %s uses forbidden tag :latest", [container.image])
        }
---
apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8sresourcelimits
spec:
  crd:
    spec:
      names:
        kind: K8sResourceLimits
      validation:
        openAPIV3Schema:
          type: object
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sresourcelimits

        is_set(x) {
          x != null
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not is_set(container.resources.requests.cpu)
          msg := sprintf("container %s missing cpu request", [container.name])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not is_set(container.resources.requests.memory)
          msg := sprintf("container %s missing memory request", [container.name])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not is_set(container.resources.limits.cpu)
          msg := sprintf("container %s missing cpu limit", [container.name])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not is_set(container.resources.limits.memory)
          msg := sprintf("container %s missing memory limit", [container.name])
        }
