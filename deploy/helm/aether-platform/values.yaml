global:
  imagePullPolicy: IfNotPresent
  ingressClassName: nginx
  tls:
    issuer: letsencrypt-production
  ingressSecurity:
    enforceHttps: true
    hsts:
      enabled: true
      maxAge: 31536000
      includeSubdomains: true
      preload: true
    headers:
      Content-Security-Policy: "default-src 'self'; frame-ancestors 'none'; img-src 'self' data:; object-src 'none'"
      Referrer-Policy: "no-referrer"
      X-Content-Type-Options: "nosniff"
      X-Frame-Options: "DENY"
      X-XSS-Protection: "1; mode=block"
  krakenSecrets:
    enabled: false
    basePath: /var/run/secrets/kraken
    annotationKey: checksum/kraken-secrets
    checksum: ""
    secretRefs:
      company: kraken-keys-company
      director1: kraken-keys-director-1
      director2: kraken-keys-director-2
    accounts:
      - name: company
        envVar: AETHER_COMPANY_KRAKEN_SECRET_PATH
        mountSubPath: company
        secretName: kraken-keys-company
      - name: director-1
        envVar: AETHER_DIRECTOR_1_KRAKEN_SECRET_PATH
        mountSubPath: director-1
        secretName: kraken-keys-director-1
      - name: director-2
        envVar: AETHER_DIRECTOR_2_KRAKEN_SECRET_PATH
        mountSubPath: director-2
        secretName: kraken-keys-director-2
  accountAllowlists:
    admin:
      secretName: ""
      secretKey: ""
    director:
      secretName: ""
      secretKey: ""
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 2000
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true

  sessionStore:
    redisUrl: ""
  releaseManifest:
    enabled: true
    databaseSecretName: release-manifest-database
    databaseSecretKey: dsn
    sslmode: require
    appName: release-manifest
  probes:
    liveness:
      httpGet:
        path: /healthz
        port: http
      initialDelaySeconds: 30
      periodSeconds: 20
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      httpGet:
        path: /healthz
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
  prometheus:
    enabled: true
    path: /metrics
    port: http
    scheme: http
  networkPolicy:
    enabled: true
    allowFromIngress:
      namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    allowFromTrustedNamespaces:
      matchLabels:
        networking.aether.io/trusted: "true"
    allowDnsNamespace:
      matchLabels:
        kubernetes.io/metadata.name: kube-system
    allowDnsPodSelector:
      matchLabels:
        k8s-app: kube-dns
    destinations:
      kraken:
        description: Kraken exchange endpoints
        cidrs:
          - 104.16.0.0/13
          - 104.24.0.0/14
          - 172.64.0.0/13
          - 131.0.72.0/22
        ports:
          - 443
      coingecko:
        description: CoinGecko API endpoints
        cidrs:
          - 104.16.0.0/13
          - 104.24.0.0/14
          - 172.64.0.0/13
          - 131.0.72.0/22
        ports:
          - 443
      linodeObjectStorage:
        description: Linode Object Storage endpoints
        cidrs:
          - 50.116.0.0/16
          - 97.107.128.0/17
          - 172.104.0.0/13
        ports:
          - 443

dependencies:
  postgresql:
    enabled: true
    fullnameOverride: aether-postgresql
    auth:
      username: aether_admin
      password: aether-admin-password
      database: aether_admin
    primary:
      initdbScriptsConfigMap: aether-postgresql-init
      persistence:
        enabled: true
        size: 100Gi
      resources:
        requests:
          cpu: 500m
          memory: 2Gi
        limits:
          cpu: 2
          memory: 4Gi
  redis:
    enabled: true
    fullnameOverride: aether-redis
    architecture: standalone
    auth:
      enabled: true
      password: aether-redis-password
    master:
      persistence:
        enabled: true
        size: 10Gi
      service:
        ports:
          redis: 6379
  kafka:
    enabled: true
    fullnameOverride: aether-kafka
    replicaCount: 3
    persistence:
      enabled: true
      size: 50Gi
    listeners:
      client:
        protocol: PLAINTEXT
      external:
        enabled: false
    zookeeper:
      replicaCount: 3
      persistence:
        enabled: true
        size: 10Gi
  nats:
    enabled: true
    fullnameOverride: aether-nats
    auth:
      enabled: false
    replicaCount: 3

managedSecrets:
  enabled: true
  secrets:
    account-service-database:
      type: postgresDsn
      connection:
        database: account_service
        username: account_service
        password: account-service-password
        sslmode: require
    account-service-secrets:
      type: opaque
      data:
        encryptionKey: change-me-account-secret
    auth-service-config:
      type: postgresDsn
      dsnKey: AUTH_DATABASE_URL
      connection:
        database: auth_service
        username: auth_service
        password: auth-service-password
        sslmode: require
      additionalData:
        AUTH_JWT_SECRET: change-me-jwt-secret
    advisor-service-database:
      type: postgresDsn
      connection:
        database: advisor_service
        username: advisor_service
        password: advisor-service-password
        sslmode: require
    behavior-service-database:
      type: postgresDsn
      connection:
        database: behavior_service
        username: behavior_service
        password: behavior-service-password
        sslmode: require
    compliance-service-database:
      type: postgresDsn
      connection:
        database: compliance_service
        username: compliance_service
        password: compliance-service-password
        sslmode: require
    benchmark-service-database:
      type: postgresDsn
      connection:
        database: benchmark_service
        username: benchmark_service
        password: benchmark-service-password
        sslmode: require
    capital-flow-service-database:
      type: postgresDsn
      connection:
        database: capital_flow_service
        username: capital_flow_service
        password: capital-flow-service-password
        sslmode: require
    capital-allocator-database:
      type: postgresDsn
      connection:
        database: capital_allocator
        username: capital_allocator
        password: capital-allocator-password
        sslmode: require
    config-service-database:
      type: postgresDsn
      connection:
        database: config_service
        username: config_service
        password: config-service-password
        sslmode: require
    fees-service-database:
      type: postgresDsn
      connection:
        database: fees_service
        username: fees_service
        password: fees-service-password
        sslmode: require
    hitl-service-database:
      type: postgresDsn
      connection:
        database: hitl_service
        username: hitl_service
        password: hitl-service-password
        sslmode: require
    override-service-database:
      type: postgresDsn
      connection:
        database: override_service
        username: override_service
        password: override-service-password
        sslmode: require
    risk-service-database:
      type: postgresDsn
      connection:
        database: risk_service
        username: risk_service
        password: risk-service-password
        sslmode: require
    seasonality-service-database:
      type: postgresDsn
      connection:
        database: seasonality_service
        username: seasonality_service
        password: seasonality-service-password
        sslmode: require
    secrets-service-config:
      type: opaque
      data:
        SECRET_ENCRYPTION_KEY: change-me-platform-secret
    sim-mode-database:
      type: postgresDsn
      connection:
        database: sim_mode
        username: sim_mode
        password: sim-mode-password
        sslmode: require
    strategy-orchestrator-database:
      type: postgresDsn
      connection:
        database: strategy_orchestrator
        username: strategy_orchestrator
        password: strategy-orchestrator-password
        sslmode: require
    training-service-database:
      type: postgresDsn
      connection:
        database: training_service
        username: training_service
        password: training-service-password
        sslmode: require
    universe-service-database:
      type: postgresDsn
      connection:
        database: universe_service
        username: universe_service
        password: universe-service-password
        sslmode: require
    volatility-service-database:
      type: postgresDsn
      connection:
        database: volatility_service
        username: volatility_service
        password: volatility-service-password
        sslmode: require
    release-manifest-database:
      type: postgresDsn
      connection:
        database: release_manifest
        username: release_manifest
        password: release-manifest-password
        sslmode: require
    fastapi-credentials:
      type: opaque
      data:
        JWT_SECRET: change-me-fastapi-jwt
        DB_URI: postgresql://api_user:change-me@aether-postgresql:5432/aether_admin
        API_KEY: change-me-fastapi-api-key
    fastapi-secrets:
      type: opaque
      data:
        KAFKA_BOOTSTRAP: PLAINTEXT://aether-kafka:9092
        NATS_URL: nats://aether-nats:4222
        KAFKA_USERNAME: change-me-kafka-user
        KAFKA_PASSWORD: change-me-kafka-password
        NATS_USERNAME: change-me-nats-user
        NATS_PASSWORD: change-me-nats-password
        REDIS_URL: rediss://:aether-redis-password@aether-redis:6379/0
    feast-offline-store:
      type: postgresDsn
      connection:
        database: feast
        username: feast
        password: feast-service-password
        sslmode: require
    feast-backup-object-storage:
      type: opaque
      data:
        bucket: aether-feast-backups
        region: us-east-1
        access_key: change-me-object-access
        secret_key: change-me-object-secret
        prefix: feast
        retention_days: "30"
bootstrap:
  enabled: true
  actor: helm
  image:
    repository: ghcr.io/aether/risk-service
    tag: latest
  workingDir: /app
  serviceAccountName: api-services
  backoffLimit: 0
  ttlSecondsAfterFinished: 600
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  config:
    enabled: true
    jobName: config-bootstrap
    configMapName: config-bootstrap
    mountPath: /bootstrap
    fileName: bootstrap.yaml
    databaseSecret:
      name: config-service-database
      dsnKey: dsn
      sslmodeKey: sslmode
    env: []
    envFrom: []
    inlineConfig: |
      account_id: global
      actor: helm
      entries:
        trading:
          max_positions: 10
          max_notional_per_symbol: 250000
        risk:
          max_drawdown_pct: 0.2
          max_var_pct: 0.05
        training:
          retrain_interval_days: 7
          window_days: 90
        hedge:
          target_pct: 0.25
          rebalance_frequency: daily
  accounts:
    enabled: true
    jobName: account-bootstrap
    databaseSecret:
      name: account-service-database
      dsnKey: dsn
    env: []
    envFrom: []
    python: |
      import os
      from sqlalchemy import create_engine
      import account_migrations as migrations

      engine = create_engine(os.environ["ACCOUNTS_DATABASE_URL"])
      migrations.upgrade(engine)
  migrations:
    enabled: true
    jobName: data-migrations
    riskDatabaseSecret:
      name: risk-service-database
      dsnKey: dsn
    releaseManifestSecret:
      name: release-manifest-database
      dsnKey: dsn
      sslmodeKey: sslmode
    env: []
    envFrom: []
    script: |
      export DATABASE_URL="$RISK_DATABASE_URL"
      alembic -c data/migrations/alembic.ini upgrade head
      alembic -c data/alembic/alembic.ini upgrade head
      python - <<'PY'
      import os
      from release_manifest import run_release_manifest_migrations

      run_release_manifest_migrations(os.environ["RELEASE_MANIFEST_DATABASE_URL"])
      PY
simulation:
  enabled: false

runtimeSafety:
  _ALLOW_INSECURE_DEFAULTS: false

serviceAccounts:
  enabled: true
  names:
    - data-services
    - cache-services
    - streaming-services
    - api-services
    - ml-services
    - gitops-controller
    - external-secrets-operator
    - cicd-bot

backendServices:
  auth:
    enabled: true
    nameOverride: auth-service
    image:
      repository: ghcr.io/aether/auth-service
      tag: latest
    replicaCount: 3
    containerPort: 8000
    serviceAccountName: api-services
    envFrom:
      - secretRef:
          name: auth-service-config
    env:
      - name: AUTH_DATABASE_SCHEMA
        value: auth
      - name: AUTH_DATABASE_POOL_SIZE
        value: "10"
      - name: AUTH_DATABASE_MAX_OVERFLOW
        value: "20"
      - name: AUTH_DATABASE_POOL_TIMEOUT_SECONDS
        value: "30"
      - name: AUTH_DATABASE_POOL_RECYCLE_SECONDS
        value: "300"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: auth.aether.example.com
      tlsSecret: auth-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    hpa:
      enabled: true
      minReplicas: 3
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  accountService:
    enabled: true
    nameOverride: account-service
    image:
      repository: cmsinfosec/aether-account-service
      tag: latest
    replicaCount: 1
    containerPort: 8000
    env:
      - name: ACCOUNTS_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: account-service-database
            key: dsn
      - name: ACCOUNT_ENCRYPTION_KEY
        valueFrom:
          secretKeyRef:
            name: account-service-secrets
            key: encryptionKey
      - name: K8S_SECRET_SYNC
        value: "true"
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: accounts.aether.example.com
      tlsSecret: account-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 300m
        memory: 512Mi
    hpa:
      enabled: false
    pdb:
      enabled: false
  behavior:
    enabled: true
    nameOverride: behavior-service
    image:
      repository: ghcr.io/aether/behavior-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: BEHAVIOR_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: behavior-service-database
            key: dsn
      - name: BEHAVIOR_DB_SSLMODE
        value: require
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: behavior.aether.example.com
      tlsSecret: behavior-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 65
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  advisor:
    enabled: true
    nameOverride: advisor-service
    image:
      repository: ghcr.io/aether/advisor-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: ADVISOR_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: advisor-service-database
            key: dsn
      - name: ADVISOR_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: advisor-service-database
            key: sslmode
      - name: ADVISOR_DB_POOL_SIZE
        value: "10"
      - name: ADVISOR_DB_MAX_OVERFLOW
        value: "5"
      - name: ADVISOR_DB_POOL_TIMEOUT
        value: "30"
      - name: ADVISOR_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: advisor.aether.example.com
      tlsSecret: advisor-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 400m
        memory: 768Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  benchmark:
    enabled: true
    nameOverride: benchmark-service
    image:
      repository: ghcr.io/aether/benchmark-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: BENCHMARK_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: benchmark-service-database
            key: dsn
      - name: BENCHMARK_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: benchmark-service-database
            key: sslmode
      - name: BENCHMARK_DB_POOL_SIZE
        value: "15"
      - name: BENCHMARK_DB_MAX_OVERFLOW
        value: "5"
      - name: BENCHMARK_DB_POOL_TIMEOUT
        value: "30"
      - name: BENCHMARK_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: benchmark.aether.example.com
      tlsSecret: benchmark-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 400m
        memory: 768Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  capitalAllocator:
    enabled: true
    nameOverride: capital-allocator
    image:
      repository: ghcr.io/aether/capital-allocator
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: CAPITAL_ALLOCATOR_DB_URL
        valueFrom:
          secretKeyRef:
            name: capital-allocator-database
            key: dsn
      - name: CAPITAL_ALLOCATOR_SSLMODE
        valueFrom:
          secretKeyRef:
            name: capital-allocator-database
            key: sslmode
            optional: true
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: false
      host: ""
      tlsSecret: ""
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  capitalFlow:
    enabled: true
    nameOverride: capital-flow-service
    image:
      repository: ghcr.io/aether/capital-flow-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: CAPITAL_FLOW_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: capital-flow-service-database
            key: dsn
      - name: CAPITAL_FLOW_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: capital-flow-service-database
            key: sslmode
            optional: true
      - name: CAPITAL_FLOW_DB_POOL_SIZE
        value: "10"
      - name: CAPITAL_FLOW_DB_MAX_OVERFLOW
        value: "5"
      - name: CAPITAL_FLOW_DB_POOL_TIMEOUT
        value: "30"
      - name: CAPITAL_FLOW_DB_POOL_RECYCLE
        value: "1800"
      - name: CAPITAL_FLOW_DB_APP_NAME
        value: capital-flow-service
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: false
      host: ""
      tlsSecret: ""
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 120
    pdb:
      enabled: true
      maxUnavailable: 1
  config:
    enabled: true
    nameOverride: config-service
    image:
      repository: ghcr.io/aether/config-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: CONFIG_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: config-service-database
            key: dsn
      - name: CONFIG_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: config-service-database
            key: sslmode
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: config.aether.example.com
      tlsSecret: config-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  fees:
    enabled: true
    nameOverride: fees-service
    image:
      repository: ghcr.io/aether/fees-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: FEES_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: fees-service-database
            key: dsn
      - name: FEES_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: fees-service-database
            key: sslmode
            optional: true
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: fees.aether.example.com
      tlsSecret: fees-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  volatility:
    enabled: true
    nameOverride: volatility-service
    image:
      repository: ghcr.io/aether/volatility-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: ANALYTICS_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: volatility-service-database
            key: dsn
      - name: ANALYTICS_DB_SSLMODE
        value: require
      - name: ANALYTICS_DB_POOL_SIZE
        value: "20"
      - name: ANALYTICS_DB_MAX_OVERFLOW
        value: "10"
      - name: ANALYTICS_DB_POOL_TIMEOUT
        value: "30"
      - name: ANALYTICS_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: volatility.aether.example.com
      tlsSecret: volatility-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 65
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 120
    pdb:
      enabled: true
      maxUnavailable: 1
  seasonality:
    enabled: true
    nameOverride: seasonality-service
    image:
      repository: ghcr.io/aether/seasonality-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: SEASONALITY_DATABASE_URI
        valueFrom:
          secretKeyRef:
            name: seasonality-service-database
            key: dsn
      - name: SEASONALITY_DB_SSLMODE
        value: require
      - name: SEASONALITY_DB_POOL_SIZE
        value: "20"
      - name: SEASONALITY_DB_MAX_OVERFLOW
        value: "10"
      - name: SEASONALITY_DB_POOL_TIMEOUT
        value: "30"
      - name: SEASONALITY_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: seasonality.aether.example.com
      tlsSecret: seasonality-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 65
    pdb:
      enabled: true
      maxUnavailable: 1
  oms:
    enabled: true
    nameOverride: oms-service
    image:
      repository: ghcr.io/aether/oms-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: SIM_MODE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: sim-mode-database
            key: dsn
      - name: SIM_MODE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: sim-mode-database
            key: sslmode
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: oms.aether.example.com
      tlsSecret: oms-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  override:
    enabled: true
    nameOverride: override-service
    image:
      repository: ghcr.io/aether/override-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: OVERRIDE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: override-service-database
            key: dsn
      - name: OVERRIDE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: override-service-database
            key: sslmode
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: override.aether.example.com
      tlsSecret: override-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 512Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  policy:
    enabled: true
    nameOverride: policy-service
    image:
      repository: ghcr.io/aether/policy-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env: []
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: policy.aether.example.com
      tlsSecret: policy-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  hitl:
    enabled: true
    nameOverride: hitl-service
    image:
      repository: ghcr.io/aether/hitl-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: HITL_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: hitl-service-database
            key: dsn
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: hitl.aether.example.com
      tlsSecret: hitl-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  risk:
    enabled: true
    nameOverride: risk-service
    image:
      repository: ghcr.io/aether/risk-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: COMPLIANCE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: compliance-service-database
            key: dsn
      - name: COMPLIANCE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: compliance-service-database
            key: sslmode
            optional: true

      - name: RISK_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: dsn
      - name: DIVERSIFICATION_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: dsn
      - name: RISK_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: sslmode
      - name: ESG_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: dsn
      - name: DIVERSIFICATION_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: sslmode
      - name: ESG_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: sslmode

    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: risk.aether.example.com
      tlsSecret: risk-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  strategyOrchestrator:
    enabled: true
    nameOverride: strategy-orchestrator
    image:
      repository: ghcr.io/aether/strategy-orchestrator
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: STRATEGY_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: strategy-orchestrator-database
            key: dsn
      - name: STRATEGY_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: strategy-orchestrator-database
            key: sslmode
            optional: true
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: strategy.aether.example.com
      tlsSecret: strategy-orchestrator-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 600m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  secrets:
    enabled: true
    nameOverride: secrets-service
    image:
      repository: ghcr.io/aether/secrets-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: SECRET_ENCRYPTION_KEY
        valueFrom:
          secretKeyRef:
            name: secrets-service-config
            key: SECRET_ENCRYPTION_KEY
      - name: SECRETS_ALLOW_INSECURE_DEFAULTS
        value: "0"
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: secrets.aether.example.com
      tlsSecret: secrets-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  trainingService:
    enabled: false
    nameOverride: training-service
    image:
      repository: ghcr.io/aether/training-service
      tag: latest
    replicaCount: 1
    containerPort: 8000
    env:
      - name: TRAINING_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: training-service-database
            key: dsn
      - name: TRAINING_DB_SSLMODE
        value: require
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: training.aether.example.com
      tlsSecret: training-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
  universe:
    enabled: true
    nameOverride: universe-service
    image:
      repository: ghcr.io/aether/universe-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: UNIVERSE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: universe-service-database
            key: dsn
      - name: UNIVERSE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: universe-service-database
            key: sslmode
            optional: true
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: universe.aether.example.com
      tlsSecret: universe-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
dataPipelines:
  enabled: true
  sharedConfig:
    fastapi-settings:
      enabled: true
      name: fastapi-config
      data:
        settings.yaml: |
          kafka:
            brokers:
              - aether-kafka:9093
            tls:
              enabled: true
              caFile: /etc/aether/tls/kafka/ca.crt
            sasl:
              mechanism: scram-sha-512
              usernameSecretKey: KAFKA_USERNAME
              passwordSecretKey: KAFKA_PASSWORD
          nats:
            url: nats://aether-nats:4222
            authentication:
              usernameSecretKey: NATS_USERNAME
              passwordSecretKey: NATS_PASSWORD
            tls:
              enabled: true
          timescaledb:
            host: aether-postgresql
            port: 5432
            database: marketdata
            user: risk_engine
            tls: true
          redis:
            host: aether-redis
            port: 6380
            tls: true
          feature_store:
            host: feast-online
            port: 6566
            tls: true
          risk_thresholds:
            liquidation_ratio: 0.25
            drawdown_limit: 0.18
          universe_controls:
            assets:
              - BTC/USD
              - ETH/USD
              - SOL/USD
  deployments:
    marketdataIngestor:
      enabled: true
      nameOverride: marketdata-ingestor
      image:
        repository: ghcr.io/aether/risk-ingestor
        tag: latest
      replicaCount: 2
      ports:
        - containerPort: 8000
          name: http
      env:
        - name: SETTINGS_FILE
          value: /etc/aether/settings.yaml
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: KAFKA_BOOTSTRAP
        - name: AETHER_DEFAULT_KAFKA_BOOTSTRAP
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: KAFKA_BOOTSTRAP
        - name: AETHER_DEFAULT_NATS_SERVERS
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: NATS_URL
        - name: AETHER_DEFAULT_KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: KAFKA_USERNAME
        - name: AETHER_DEFAULT_KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: KAFKA_PASSWORD
        - name: AETHER_DEFAULT_NATS_USERNAME
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: NATS_USERNAME
        - name: AETHER_DEFAULT_NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fastapi-secrets
              key: NATS_PASSWORD
      volumeMounts:
        - name: config
          mountPath: /etc/aether
          readOnly: true
        - name: kafka-tls
          mountPath: /etc/aether/tls/kafka
          readOnly: true
      volumes:
        - name: config
          configMap:
            name: fastapi-config
        - name: kafka-tls
          secret:
            secretName: kafka-tls
      readinessProbe:
        httpGet:
          path: /metrics
          port: http
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 3
        failureThreshold: 6
      livenessProbe:
        httpGet:
          path: /healthz
          port: http
        initialDelaySeconds: 30
        periodSeconds: 20
        timeoutSeconds: 5
        failureThreshold: 3
      resources:
        requests:
          cpu: 200m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      service:
        enabled: true
        ports:
          - name: http
            port: 80
            targetPort: http
    krakenWsIngest:
      enabled: true
      nameOverride: kraken-ws-ingest
      image:
        repository: ghcr.io/aether/kraken-ws-ingest
        tag: latest
      replicaCount: 1
      args:
        - --pairs
        - XBT/USD,ETH/USD
        - --kafka-bootstrap
        - aether-kafka:9092
        - --kafka-security-protocol
        - SSL
        - --kafka-ca-path
        - /etc/aether/tls/kafka/ca.crt
        - --trade-topic
        - md.trades
        - --book-topic
        - md.book
        - --metrics-port
        - "9000"
      env:
        - name: LOG_LEVEL
          value: INFO
        - name: METRICS_PORT
          value: "9000"
      ports:
        - containerPort: 9000
          name: metrics
      volumeMounts:
        - name: kafka-tls
          mountPath: /etc/aether/tls/kafka
          readOnly: true
      volumes:
        - name: kafka-tls
          secret:
            secretName: kafka-tls
      livenessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - pgrep -f kraken_ws_ingest || exit 1
        initialDelaySeconds: 30
        periodSeconds: 30
      readinessProbe:
        exec:
          command:
            - /bin/sh
            - -c
            - pgrep -f kraken_ws_ingest || exit 1
        initialDelaySeconds: 10
        periodSeconds: 30
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      service:
        enabled: true
        ports:
          - name: metrics
            port: 9000
            targetPort: metrics
      prometheus:
        enabled: true
        path: /metrics
        port: metrics
feast:
  enabled: true
  nameOverride: feast-online
  image:
    repository: feastdev/feast-serving
    tag: 1.0.0
  init:
    image: python:3.11-slim
  replicaCount: 2
  redis:
    host: aether-redis
    port: 6379
  registry:
    pvcName: feast-registry
    accessMode: ReadWriteOnce
    size: 5Gi
    path: /data/registry.db
  offlineStoreSecret: feast-offline-store
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  service:
    grpcPort: 6566
    httpPort: 80
  backup:
    name: feast-backup
    schedule: "15 3 * * *"
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 1
    failedJobsHistoryLimit: 3
    backoffLimit: 1
    objectStoreSecret: feast-backup-object-storage
    image:
      repository: ghcr.io/aether/ops-runtime
      tag: latest
ui:
  enabled: true
  nameOverride: aether-2-ui
  replicaCount: 2
  image:
    repository: ghcr.io/aether/aether-2-ui
    tag: latest
  containerPort: 8080
  env:
    # The UI consumes the public API endpoint during build/runtime. Keep the
    # canonical URL in sync with the risk API ingress so the compiled assets
    # point at the correct backend cluster.
    - name: NEXT_PUBLIC_API_BASE_URL
      value: https://risk.aether.example.com
    # Some build variants still look for a Vite-style variable; surface the
    # same value to simplify the production pipeline defaults.
    - name: VITE_API_BASE_URL
      value: https://risk.aether.example.com
  service:
    port: 80
    targetPort: http
  ingress:
    enabled: true
    host: ui.aether.example.com
    tlsSecret: aether-2-ui-tls
    annotations: {}
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  usesKrakenSecrets: false
  extraVolumeMounts: []
  extraVolumes: []
