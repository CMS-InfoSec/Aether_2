global:
  imagePullPolicy: IfNotPresent
  ingressClassName: nginx
  tls:
    issuer: letsencrypt-production
  ingressSecurity:
    enforceHttps: true
    hsts:
      enabled: true
      maxAge: 31536000
      includeSubdomains: true
      preload: true
    headers:
      Content-Security-Policy: "default-src 'self'; frame-ancestors 'none'; img-src 'self' data:; object-src 'none'"
      Referrer-Policy: "no-referrer"
      X-Content-Type-Options: "nosniff"
      X-Frame-Options: "DENY"
      X-XSS-Protection: "1; mode=block"
  krakenSecrets:
    enabled: true
    basePath: /var/run/secrets/kraken
    annotationKey: checksum/kraken-secrets
    checksum: ""
    secretRefs:
      company: kraken-keys-company
      director1: kraken-keys-director-1
      director2: kraken-keys-director-2
    accounts:
      - name: company
        envVar: AETHER_COMPANY_KRAKEN_SECRET_PATH
        mountSubPath: company
        secretName: kraken-keys-company
      - name: director-1
        envVar: AETHER_DIRECTOR_1_KRAKEN_SECRET_PATH
        mountSubPath: director-1
        secretName: kraken-keys-director-1
      - name: director-2
        envVar: AETHER_DIRECTOR_2_KRAKEN_SECRET_PATH
        mountSubPath: director-2
        secretName: kraken-keys-director-2
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 2000
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  sessionStore:
    redisUrl: redis://redis.aether.svc.cluster.local:6379/0
  releaseManifest:
    enabled: true
    databaseSecretName: release-manifest-database
    databaseSecretKey: dsn
    sslmode: require
    appName: release-manifest
  probes:
    liveness:
      httpGet:
        path: /healthz
        port: http
      initialDelaySeconds: 30
      periodSeconds: 20
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      httpGet:
        path: /healthz
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
  prometheus:
    enabled: true
    path: /metrics
    port: http
    scheme: http
  networkPolicy:
    enabled: true
    allowFromIngress:
      namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx
      podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    allowFromTrustedNamespaces:
      matchLabels:
        networking.aether.io/trusted: "true"
    allowDnsNamespace:
      matchLabels:
        kubernetes.io/metadata.name: kube-system
    allowDnsPodSelector:
      matchLabels:
        k8s-app: kube-dns
    destinations:
      kraken:
        description: Kraken exchange endpoints
        cidrs:
          - 104.16.0.0/13
          - 104.24.0.0/14
          - 172.64.0.0/13
          - 131.0.72.0/22
        ports:
          - 443
      coingecko:
        description: CoinGecko API endpoints
        cidrs:
          - 104.16.0.0/13
          - 104.24.0.0/14
          - 172.64.0.0/13
          - 131.0.72.0/22
        ports:
          - 443
      linodeObjectStorage:
        description: Linode Object Storage endpoints
        cidrs:
          - 50.116.0.0/16
          - 97.107.128.0/17
          - 172.104.0.0/13
        ports:
          - 443
backendServices:
  accountService:
    enabled: true
    nameOverride: account-service
    image:
      repository: cmsinfosec/aether-account-service
      tag: latest
    replicaCount: 1
    containerPort: 8000
    env:
      - name: ACCOUNTS_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: account-service-database
            key: dsn
      - name: ACCOUNT_ENCRYPTION_KEY
        valueFrom:
          secretKeyRef:
            name: account-service-secrets
            key: encryptionKey
      - name: K8S_SECRET_SYNC
        value: "true"
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: accounts.aether.example.com
      tlsSecret: account-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 300m
        memory: 512Mi
    hpa:
      enabled: false
    pdb:
      enabled: false
  behavior:
    enabled: true
    nameOverride: behavior-service
    image:
      repository: ghcr.io/aether/behavior-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: BEHAVIOR_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: behavior-service-database
            key: dsn
      - name: BEHAVIOR_DB_SSLMODE
        value: require
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: behavior.aether.example.com
      tlsSecret: behavior-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 65
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  advisor:
    enabled: true
    nameOverride: advisor-service
    image:
      repository: ghcr.io/aether/advisor-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: ADVISOR_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: advisor-service-database
            key: dsn
      - name: ADVISOR_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: advisor-service-database
            key: sslmode
      - name: ADVISOR_DB_POOL_SIZE
        value: "10"
      - name: ADVISOR_DB_MAX_OVERFLOW
        value: "5"
      - name: ADVISOR_DB_POOL_TIMEOUT
        value: "30"
      - name: ADVISOR_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: advisor.aether.example.com
      tlsSecret: advisor-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 400m
        memory: 768Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  benchmark:
    enabled: true
    nameOverride: benchmark-service
    image:
      repository: ghcr.io/aether/benchmark-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: BENCHMARK_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: benchmark-service-database
            key: dsn
      - name: BENCHMARK_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: benchmark-service-database
            key: sslmode
      - name: BENCHMARK_DB_POOL_SIZE
        value: "15"
      - name: BENCHMARK_DB_MAX_OVERFLOW
        value: "5"
      - name: BENCHMARK_DB_POOL_TIMEOUT
        value: "30"
      - name: BENCHMARK_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: benchmark.aether.example.com
      tlsSecret: benchmark-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 400m
        memory: 768Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  capitalFlow:
    enabled: true
    nameOverride: capital-flow-service
    image:
      repository: ghcr.io/aether/capital-flow-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: CAPITAL_FLOW_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: capital-flow-service-database
            key: dsn
      - name: CAPITAL_FLOW_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: capital-flow-service-database
            key: sslmode
            optional: true
      - name: CAPITAL_FLOW_DB_POOL_SIZE
        value: "10"
      - name: CAPITAL_FLOW_DB_MAX_OVERFLOW
        value: "5"
      - name: CAPITAL_FLOW_DB_POOL_TIMEOUT
        value: "30"
      - name: CAPITAL_FLOW_DB_POOL_RECYCLE
        value: "1800"
      - name: CAPITAL_FLOW_DB_APP_NAME
        value: capital-flow-service
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: false
      host: ""
      tlsSecret: ""
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 120
    pdb:
      enabled: true
      maxUnavailable: 1
  fees:
    enabled: true
    nameOverride: fees-service
    image:
      repository: ghcr.io/aether/fees-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: FEES_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: fees-service-database
            key: dsn
      - name: FEES_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: fees-service-database
            key: sslmode
            optional: true
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: fees.aether.example.com
      tlsSecret: fees-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  volatility:
    enabled: true
    nameOverride: volatility-service
    image:
      repository: ghcr.io/aether/volatility-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: ANALYTICS_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: volatility-service-database
            key: dsn
      - name: ANALYTICS_DB_SSLMODE
        value: require
      - name: ANALYTICS_DB_POOL_SIZE
        value: "20"
      - name: ANALYTICS_DB_MAX_OVERFLOW
        value: "10"
      - name: ANALYTICS_DB_POOL_TIMEOUT
        value: "30"
      - name: ANALYTICS_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: volatility.aether.example.com
      tlsSecret: volatility-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 65
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 120
    pdb:
      enabled: true
      maxUnavailable: 1
  seasonality:
    enabled: true
    nameOverride: seasonality-service
    image:
      repository: ghcr.io/aether/seasonality-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: SEASONALITY_DATABASE_URI
        valueFrom:
          secretKeyRef:
            name: seasonality-service-database
            key: dsn
      - name: SEASONALITY_DB_SSLMODE
        value: require
      - name: SEASONALITY_DB_POOL_SIZE
        value: "20"
      - name: SEASONALITY_DB_MAX_OVERFLOW
        value: "10"
      - name: SEASONALITY_DB_POOL_TIMEOUT
        value: "30"
      - name: SEASONALITY_DB_POOL_RECYCLE
        value: "1800"
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: seasonality.aether.example.com
      tlsSecret: seasonality-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 150m
        memory: 384Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 65
    pdb:
      enabled: true
      maxUnavailable: 1
  oms:
    enabled: true
    nameOverride: oms-service
    image:
      repository: ghcr.io/aether/oms-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: SESSION_REDIS_URL
        value: redis://redis:6379/0
      - name: SIM_MODE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: sim-mode-database
            key: dsn
      - name: SIM_MODE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: sim-mode-database
            key: sslmode
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: oms.aether.example.com
      tlsSecret: oms-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  override:
    enabled: true
    nameOverride: override-service
    image:
      repository: ghcr.io/aether/override-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: OVERRIDE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: override-service-database
            key: dsn
      - name: OVERRIDE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: override-service-database
            key: sslmode
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: override.aether.example.com
      tlsSecret: override-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 512Mi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  policy:
    enabled: true
    nameOverride: policy-service
    image:
      repository: ghcr.io/aether/policy-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env: []
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: policy.aether.example.com
      tlsSecret: policy-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  hitl:
    enabled: true
    nameOverride: hitl-service
    image:
      repository: ghcr.io/aether/hitl-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: HITL_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: hitl-service-database
            key: dsn
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: hitl.aether.example.com
      tlsSecret: hitl-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  risk:
    enabled: true
    nameOverride: risk-service
    image:
      repository: ghcr.io/aether/risk-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:

      - name: RISK_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: dsn
      - name: DIVERSIFICATION_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: dsn
      - name: RISK_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: sslmode
      - name: ESG_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: dsn
      - name: DIVERSIFICATION_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: sslmode
      - name: ESG_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: risk-service-database
            key: sslmode

    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: risk.aether.example.com
      tlsSecret: risk-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 70
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 75
      behavior:
        scaleUp:
          stabilizationWindowSeconds: 60
        scaleDown:
          stabilizationWindowSeconds: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  secrets:
    enabled: true
    nameOverride: secrets-service
    image:
      repository: ghcr.io/aether/secrets-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: SECRET_ENCRYPTION_KEY
        valueFrom:
          secretKeyRef:
            name: secrets-service-config
            key: SECRET_ENCRYPTION_KEY
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: secrets.aether.example.com
      tlsSecret: secrets-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
  trainingService:
    enabled: false
    nameOverride: training-service
    image:
      repository: ghcr.io/aether/training-service
      tag: latest
    replicaCount: 1
    containerPort: 8000
    env:
      - name: TRAINING_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: training-service-database
            key: dsn
      - name: TRAINING_DB_SSLMODE
        value: require
    usesKrakenSecrets: false
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: training.aether.example.com
      tlsSecret: training-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: false
    pdb:
      enabled: false
  universe:
    enabled: true
    nameOverride: universe-service
    image:
      repository: ghcr.io/aether/universe-service
      tag: latest
    replicaCount: 2
    containerPort: 8000
    env:
      - name: UNIVERSE_DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: universe-service-database
            key: dsn
      - name: UNIVERSE_DB_SSLMODE
        valueFrom:
          secretKeyRef:
            name: universe-service-database
            key: sslmode
            optional: true
    usesKrakenSecrets: true
    extraVolumeMounts: []
    extraVolumes: []
    service:
      port: 80
      targetPort: http
    ingress:
      enabled: true
      host: universe.aether.example.com
      tlsSecret: universe-service-tls
      annotations: {}
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 500m
        memory: 1Gi
    hpa:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
    pdb:
      enabled: true
      maxUnavailable: 1
ui:
  enabled: true
  nameOverride: aether-2-ui
  replicaCount: 2
  image:
    repository: ghcr.io/aether/aether-2-ui
    tag: latest
  containerPort: 8080
  env:
    # The UI consumes the public API endpoint during build/runtime. Keep the
    # canonical URL in sync with the risk API ingress so the compiled assets
    # point at the correct backend cluster.
    - name: NEXT_PUBLIC_API_BASE_URL
      value: https://risk.aether.example.com
    # Some build variants still look for a Vite-style variable; surface the
    # same value to simplify the production pipeline defaults.
    - name: VITE_API_BASE_URL
      value: https://risk.aether.example.com
  service:
    port: 80
    targetPort: http
  ingress:
    enabled: true
    host: ui.aether.example.com
    tlsSecret: aether-2-ui-tls
    annotations: {}
  resources: {}
  usesKrakenSecrets: false
  extraVolumeMounts: []
  extraVolumes: []
