{{- $feast := .Values.feast | default (dict) -}}
{{- if $feast.enabled | default false }}
{{- $name := default "feast-online" $feast.nameOverride -}}
{{- $labels := dict "name" $name "Release" $.Release -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $feast.config.name | default "feast-config" }}
  labels:
    {{- include "aether-platform.labels" $labels | nindent 4 }}
data:
  feature_store.yaml: |
{{ $feast.config.featureStore | default "project: kraken-risk\nregistry: sqlite:////data/registry.db\nprovider: kubernetes\nonline_store:\n  type: redis\n  connection_string: redis:6379\noffline_store:\n  type: postgres\n  host: ${FEAST_OFFLINE_HOST:-timescaledb}\n  port: ${FEAST_OFFLINE_PORT:-5432}\n  database: ${FEAST_OFFLINE_DB:-marketdata}\n  db_schema: ${FEAST_OFFLINE_SCHEMA:-feast}\n  user: ${FEAST_OFFLINE_USER}\n  password: ${FEAST_OFFLINE_PASSWORD}\n" | indent 4 }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $feast.registry.pvcName | default "feast-registry" }}
  labels:
    {{- include "aether-platform.labels" $labels | nindent 4 }}
spec:
  accessModes:
    - {{ $feast.registry.accessMode | default "ReadWriteOnce" }}
  resources:
    requests:
      storage: {{ $feast.registry.size | default "5Gi" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels:
    {{- include "aether-platform.labels" $labels | nindent 4 }}
    app: {{ $name }}
spec:
  replicas: {{ $feast.replicaCount | default 2 }}
  selector:
    matchLabels:
      {{- include "aether-platform.selectorLabels" (dict "name" $name) | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "aether-platform.selectorLabels" (dict "name" $name) | nindent 8 }}
        {{- include "aether-platform.labels" $labels | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml $.Values.global.podSecurityContext | nindent 8 }}
      initContainers:
        - name: render-feast-config
          image: {{ $feast.init.image | default "python:3.11-slim" }}
          command:
            - python
            - -c
            - |
              import os
              from pathlib import Path

              template = Path("/templates/feature_store.yaml").read_text()
              password = os.environ["FEAST_OFFLINE_PASSWORD"]
              rendered = template.replace("${FEAST_OFFLINE_PASSWORD}", password)
              output = Path("/etc/feast/feature_store.yaml")
              output.parent.mkdir(parents=True, exist_ok=True)
              output.write_text(rendered)
          env:
            - name: FEAST_OFFLINE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $feast.offlineStoreSecret | default "feast-offline-store" }}
                  key: password
          volumeMounts:
            - name: feast-config-template
              mountPath: /templates
              readOnly: true
            - name: feast-rendered-config
              mountPath: /etc/feast
          securityContext:
            allowPrivilegeEscalation: {{ $.Values.global.containerSecurityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ $.Values.global.containerSecurityContext.readOnlyRootFilesystem }}
            {{- with $.Values.global.containerSecurityContext.capabilities }}
            capabilities:
              {{- with .drop }}
              drop:
                {{- range . }}
                - {{ . }}
                {{- end }}
              {{- end }}
            {{- end }}
      containers:
        - name: feast
          image: {{ include "aether-platform.image" $feast.image }}
          ports:
            - containerPort: 6566
              name: grpc
            - containerPort: 6567
              name: http
          env:
            - name: FEAST_REDIS_HOST
              value: {{ $feast.redis.host | default "aether-redis" }}
            - name: FEAST_REDIS_PORT
              value: {{ $feast.redis.port | default "6379" | quote }}
            - name: FEAST_REGISTRY_PATH
              value: {{ $feast.registry.path | default "/data/registry.db" }}
            - name: FEAST_OFFLINE_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $feast.offlineStoreSecret | default "feast-offline-store" }}
                  key: username
            - name: FEAST_OFFLINE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $feast.offlineStoreSecret | default "feast-offline-store" }}
                  key: password
          volumeMounts:
            - name: feast-rendered-config
              mountPath: /etc/feast
              readOnly: true
            - name: feast-registry
              mountPath: /data
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml $feast.resources | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: {{ $.Values.global.containerSecurityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: {{ $.Values.global.containerSecurityContext.readOnlyRootFilesystem }}
            {{- with $.Values.global.containerSecurityContext.capabilities }}
            capabilities:
              {{- with .drop }}
              drop:
                {{- range . }}
                - {{ . }}
                {{- end }}
              {{- end }}
            {{- end }}
      volumes:
        - name: feast-config-template
          configMap:
            name: {{ $feast.config.name | default "feast-config" }}
        - name: feast-rendered-config
          emptyDir: {}
        - name: feast-registry
          persistentVolumeClaim:
            claimName: {{ $feast.registry.pvcName | default "feast-registry" }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}
  labels:
    {{- include "aether-platform.labels" $labels | nindent 4 }}
spec:
  selector:
    {{- include "aether-platform.selectorLabels" (dict "name" $name) | nindent 4 }}
  ports:
    - name: grpc
      port: {{ $feast.service.grpcPort | default 6566 }}
      targetPort: grpc
    - name: http
      port: {{ $feast.service.httpPort | default 80 }}
      targetPort: http
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $feast.backup.name | default "feast-backup" }}
  labels:
    {{- include "aether-platform.labels" (dict "name" ($feast.backup.name | default "feast-backup") "Release" $.Release) | nindent 4 }}
spec:
  schedule: {{ $feast.backup.schedule | default "15 3 * * *" | quote }}
  concurrencyPolicy: {{ $feast.backup.concurrencyPolicy | default "Forbid" }}
  successfulJobsHistoryLimit: {{ $feast.backup.successfulJobsHistoryLimit | default 1 }}
  failedJobsHistoryLimit: {{ $feast.backup.failedJobsHistoryLimit | default 3 }}
  jobTemplate:
    spec:
      backoffLimit: {{ $feast.backup.backoffLimit | default 1 }}
      template:
        spec:
          restartPolicy: Never
          initContainers:
            - name: render-feast-config
              image: {{ $feast.init.image | default "python:3.11-slim" }}
              command:
                - python
                - -c
                - |
                  import os
                  from pathlib import Path

                  template = Path("/templates/feature_store.yaml").read_text()
                  password = os.environ["FEAST_OFFLINE_PASSWORD"]
                  rendered = template.replace("${FEAST_OFFLINE_PASSWORD}", password)
                  output = Path("/etc/feast/feature_store.yaml")
                  output.parent.mkdir(parents=True, exist_ok=True)
                  output.write_text(rendered)
              env:
                - name: FEAST_OFFLINE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.offlineStoreSecret | default "feast-offline-store" }}
                      key: password
              volumeMounts:
                - name: feast-config-template
                  mountPath: /templates
                  readOnly: true
                - name: feast-rendered-config
                  mountPath: /etc/feast
              securityContext:
                allowPrivilegeEscalation: {{ $.Values.global.containerSecurityContext.allowPrivilegeEscalation }}
                readOnlyRootFilesystem: {{ $.Values.global.containerSecurityContext.readOnlyRootFilesystem }}
                {{- with $.Values.global.containerSecurityContext.capabilities }}
                capabilities:
                  {{- with .drop }}
                  drop:
                    {{- range . }}
                    - {{ . }}
                    {{- end }}
                  {{- end }}
                {{- end }}
          containers:
            - name: backup
              image: {{ include "aether-platform.image" $feast.backup.image }}
              imagePullPolicy: {{ $.Values.global.imagePullPolicy }}
              command:
                - /bin/bash
                - -c
                - {{ $feast.backup.script | default "set -euo pipefail\napt-get update >/tmp/apt-install.log\napt-get install -y --no-install-recommends redis-tools >>/tmp/apt-install.log\nrm -rf /var/lib/apt/lists/*\npip install --no-cache-dir feast==0.40.1 boto3 cryptography >/tmp/pip-install.log\npython -m ops.backup.feast_backup backup" | quote }}
              env:
                - name: FEAST_FEATURE_STORE_PATH
                  value: /etc/feast/feature_store.yaml
                - name: FEAST_REPO_PATH
                  value: /etc/feast
                - name: FEAST_REDIS_HOST
                  value: {{ $feast.redis.host | default "aether-redis" }}
                - name: FEAST_REDIS_PORT
                  value: {{ $feast.redis.port | default "6379" | quote }}
                - name: FEAST_OFFLINE_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.offlineStoreSecret | default "feast-offline-store" }}
                      key: username
                - name: FEAST_OFFLINE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.offlineStoreSecret | default "feast-offline-store" }}
                      key: password
                - name: LINODE_BUCKET
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: bucket
                - name: LINODE_PREFIX
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: prefix
                      optional: true
                - name: LINODE_REGION
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: region
                      optional: true
                - name: LINODE_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: endpoint
                      optional: true
                - name: LINODE_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: access_key
                - name: LINODE_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: secret_key
                - name: LINODE_SSE_ALGO
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: sse_algorithm
                      optional: true
                - name: LINODE_SSE_KMS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: kms_key_id
                      optional: true
                - name: BACKUP_RETENTION_DAYS
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: retention_days
                      optional: true
                - name: BACKUP_ENCRYPTION_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $feast.backup.objectStoreSecret | default "feast-backup-object-storage" }}
                      key: encryption_key
              volumeMounts:
                - name: feast-rendered-config
                  mountPath: /etc/feast
                  readOnly: true
              securityContext:
                allowPrivilegeEscalation: {{ $.Values.global.containerSecurityContext.allowPrivilegeEscalation }}
                readOnlyRootFilesystem: {{ $.Values.global.containerSecurityContext.readOnlyRootFilesystem }}
                {{- with $.Values.global.containerSecurityContext.capabilities }}
                capabilities:
                  {{- with .drop }}
                  drop:
                    {{- range . }}
                    - {{ . }}
                    {{- end }}
                  {{- end }}
                {{- end }}
          volumes:
            - name: feast-config-template
              configMap:
                name: {{ $feast.config.name | default "feast-config" }}
            - name: feast-rendered-config
              emptyDir: {}
{{- end }}
