{{- $managed := .Values.managedSecrets | default (dict) -}}
{{- $pg := .Values.dependencies.postgresql | default (dict) -}}
{{- if and ($pg.enabled | default true) ($managed.enabled | default true) ($managed.secrets) }}
{{- $pgSecrets := dict "items" (list) -}}
{{- range $name, $secret := $managed.secrets }}
{{- if and ($secret.enabled | default true) (eq ($secret.type | default "opaque") "postgresDsn") }}
{{- $_ := set $pgSecrets "items" (append $pgSecrets.items (dict "name" $name "secret" $secret)) -}}
{{- end }}
{{- end }}
{{- if gt (len $pgSecrets.items) 0 }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "aether-platform.postgresqlInitdbConfigMapName" . }}
  labels:
    {{- include "aether-platform.labels" (dict "name" (include "aether-platform.postgresqlInitdbConfigMapName" .) "Release" $.Release) | nindent 4 }}
data:
  00-managed-databases.sql: |-
    -- Generated by the Aether umbrella chart to provision service databases.
    {{- range $entry := $pgSecrets.items }}
    {{- $secret := $entry.secret -}}
    {{- $conn := $secret.connection -}}
    {{- $username := required (printf "managed secret %s requires username" $entry.name) $conn.username -}}
    {{- $database := required (printf "managed secret %s requires database" $entry.name) $conn.database -}}
    {{- $password := required (printf "managed secret %s requires password" $entry.name) $conn.password -}}
    {{- $escapedUser := include "aether-platform.escapeSqlLiteral" $username -}}
    {{- $escapedDatabase := include "aether-platform.escapeSqlLiteral" $database -}}
    {{- $escapedPassword := include "aether-platform.escapeSqlLiteral" $password -}}
    DO
    $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '{{ $escapedUser }}') THEN
        EXECUTE 'CREATE ROLE "{{ $escapedUser }}" WITH LOGIN PASSWORD ''{{ $escapedPassword }}''';
      ELSE
        EXECUTE 'ALTER ROLE "{{ $escapedUser }}" WITH LOGIN PASSWORD ''{{ $escapedPassword }}''';
      END IF;
    END
    $$ LANGUAGE plpgsql;

    DO
    $$
    BEGIN
      IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '{{ $escapedDatabase }}') THEN
        EXECUTE 'CREATE DATABASE "{{ $escapedDatabase }}" OWNER "{{ $escapedUser }}"';
      ELSE
        EXECUTE 'ALTER DATABASE "{{ $escapedDatabase }}" OWNER TO "{{ $escapedUser }}"';
      END IF;
    END
    $$ LANGUAGE plpgsql;

    GRANT ALL PRIVILEGES ON DATABASE "{{ $escapedDatabase }}" TO "{{ $escapedUser }}";

    {{- end }}
{{- end }}
{{- end }}
