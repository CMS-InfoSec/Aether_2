name: OCI Build Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'deploy/docker/**'
      - '.github/workflows/oci-build.yml'

env:
  REGISTRY_HOST: ghcr.io

permissions:
  contents: read
  packages: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.workflow_run && github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]
        && github.event.workflow_run.pull_requests[0].number
      || (
        github.event.workflow_run
        && (
          github.event.workflow_run.head_repository
          && github.event.workflow_run.head_repository.full_name
          && github.event.workflow_run.head_repository.full_name != ''
          && format(
            '{0}:{1}',
            github.event.workflow_run.head_repository.full_name,
            (
              github.event.workflow_run.head_branch
              && github.event.workflow_run.head_branch != ''
              && github.event.workflow_run.head_branch
            )
            || github.event.workflow_run.run_number
            || github.event.workflow_run.id
            || github.run_id
          )
          || (
            github.event.workflow_run.repository
            && github.event.workflow_run.repository.full_name
            && github.event.workflow_run.repository.full_name != ''
            && format(
              '{0}:{1}',
              github.event.workflow_run.repository.full_name,
              (
                github.event.workflow_run.head_branch
                && github.event.workflow_run.head_branch != ''
                && github.event.workflow_run.head_branch
              )
              || github.event.workflow_run.run_number
              || github.event.workflow_run.id
              || github.run_id
            )
          )
          || (
            github.event.workflow_run.head_branch
            && github.event.workflow_run.head_branch != ''
            && github.event.workflow_run.head_branch
          )
        )
      )
      || github.event.pull_request && github.event.pull_request.number
      || github.head_ref && github.head_ref != '' && github.head_ref
      || github.ref
      || github.event.workflow_run && github.event.workflow_run.run_number
      || github.event.workflow_run && github.event.workflow_run.id
      || github.run_id
    }}
  cancel-in-progress: true




jobs:
  kaniko:
    name: Kaniko Build
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.guard.outputs.should_build }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check required Dockerfiles
        id: guard
        run: |
          if [ -f deploy/docker/kraken-ws-ingest/Dockerfile ] && [ -f deploy/docker/risk-api/Dockerfile ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
            echo "Required Dockerfiles not found. Skipping Kaniko build stage."
          fi

      - name: Log in to GHCR
        if: steps.guard.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine image registry
        if: steps.guard.outputs.should_build == 'true'
        id: image-meta
        run: |
          set -euo pipefail
          owner="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          echo "kraken_tag=${{ env.REGISTRY_HOST }}/${owner}/kraken-ws-ingest:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "risk_api_tag=${{ env.REGISTRY_HOST }}/${owner}/risk-api:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Build Kraken WS Ingest image
        if: steps.guard.outputs.should_build == 'true'
        uses: int128/kaniko-action@v1.52.0
        with:
          context: .
          file: deploy/docker/kraken-ws-ingest/Dockerfile
          push: true
          tags: |
            ${{ steps.image-meta.outputs.kraken_tag }}
          kaniko-args: |
            --snapshotMode=time
            --single-snapshot
      - name: Build Risk API image
        if: steps.guard.outputs.should_build == 'true'
        uses: int128/kaniko-action@v1.52.0
        with:
          context: .
          file: deploy/docker/risk-api/Dockerfile
          push: true
          tags: |
            ${{ steps.image-meta.outputs.risk_api_tag }}
          kaniko-args: |
            --snapshotMode=time
            --single-snapshot
  buildah:
    name: Buildah Build
    runs-on: ubuntu-latest
    needs: kaniko
    if: ${{ needs.kaniko.outputs.should_build == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Buildah
        run: |
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends buildah
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
      - name: Determine image registry
        id: image-meta
        run: |
          set -euo pipefail
          owner="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          echo "kraken_tag=${{ env.REGISTRY_HOST }}/${owner}/kraken-ws-ingest:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "risk_api_tag=${{ env.REGISTRY_HOST }}/${owner}/risk-api:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Build Kraken WS Ingest image
        env:
          IMAGE_REF: ${{ steps.image-meta.outputs.kraken_tag }}
        run: |
          buildah bud --layers -f deploy/docker/kraken-ws-ingest/Dockerfile -t "${IMAGE_REF}" .
      - name: Build Risk API image
        env:
          IMAGE_REF: ${{ steps.image-meta.outputs.risk_api_tag }}
        run: |
          buildah bud --layers -f deploy/docker/risk-api/Dockerfile -t "${IMAGE_REF}" .
      - name: Push images
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
          KRAKEN_REF: ${{ steps.image-meta.outputs.kraken_tag }}
          RISK_API_REF: ${{ steps.image-meta.outputs.risk_api_tag }}
        run: |
          if [ -n "$CR_PAT" ]; then
            echo "::add-mask::$CR_PAT"
          fi
          echo "${CR_PAT}" | buildah login --username ${{ github.actor }} --password-stdin "${{ env.REGISTRY_HOST }}"
          buildah push "${KRAKEN_REF}"
          buildah push "${RISK_API_REF}"
