name: Main Branch Release Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write
  actions: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.workflow_run && github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]
        && github.event.workflow_run.pull_requests[0].number
      || github.event.workflow_run && github.event.workflow_run.head_branch && github.event.workflow_run.head_branch != ''
        && github.event.workflow_run.head_branch
      || github.event.pull_request && github.event.pull_request.number
      || github.head_ref && github.head_ref != '' && github.head_ref
      || github.ref
      || github.event.workflow_run && github.event.workflow_run.id
      || github.run_id
    }}
  cancel-in-progress: true




jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: >-
            pip-${{ runner.os }}-${{
              hashFiles(
                '**/requirements.txt',
                '**/requirements-ci.txt',
                'pyproject.toml',
                'poetry.lock'
              )
            }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install ruff black mypy pytest

      - name: Run Ruff
        run: ruff check .

      - name: Run Black (check mode)
        run: black --check .

      - name: Run mypy
        run: mypy .

      - name: Run pytest
        run: pytest

  build-image:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    outputs:
      image_ref: ${{ steps.image-metadata.outputs.image_ref }}
      image_digest: ${{ steps.image-metadata.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image destination
        id: image-meta
        run: |
          set -euo pipefail
          owner="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          echo "destination=ghcr.io/${owner}/aether-app" >> "$GITHUB_OUTPUT"

      - name: Build and push image
        id: publish
        uses: int128/kaniko-action@v1.52.0
        with:
          push: true
          context: .
          file: deploy/docker/kraken-ws-ingest/Dockerfile
          tags: |
            ${{ steps.image-meta.outputs.destination }}:${{ github.sha }}
            ${{ steps.image-meta.outputs.destination }}:latest

      - name: Capture image metadata
        id: image-metadata
        env:
          IMAGE_DESTINATION: ${{ steps.image-meta.outputs.destination }}
          IMAGE_DIGEST: ${{ steps.publish.outputs.digest }}
        run: |
          set -euo pipefail
          echo "image_ref=${IMAGE_DESTINATION}" >> "$GITHUB_OUTPUT"
          echo "digest=${IMAGE_DIGEST}" >> "$GITHUB_OUTPUT"

  security-and-sign:
    name: Security Scan, SBOM, and Signing
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.6
        with:
          syft-version: v1.33.0

      - name: Authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan image for vulnerabilities
        uses: anchore/scan-action@v7
        with:
          image: ${{ needs.build-image.outputs.image_ref }}@${{ needs.build-image.outputs.image_digest }}
          severity-cutoff: critical

      - name: Generate SBOM
        env:
          SYFT_REGISTRY_AUTH_USERNAME: ${{ github.actor }}
          SYFT_REGISTRY_AUTH_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          syft "${{ needs.build-image.outputs.image_ref }}@${{ needs.build-image.outputs.image_digest }}" -o json > sbom.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      - name: Sign container image
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          if [ -z "$COSIGN_PRIVATE_KEY" ]; then
            echo "COSIGN_PRIVATE_KEY secret must be provided" >&2
            exit 1
          fi
          if [ -z "$COSIGN_PASSWORD" ]; then
            echo "COSIGN_PASSWORD secret must be provided" >&2
            exit 1
          fi
          mask_secret() {
            if [ -z "$1" ]; then
              return
            fi
            printf '%s' "$1" | while IFS= read -r line; do
              [ -z "$line" ] && continue
              echo "::add-mask::$line"
            done
          }
          mask_secret "$COSIGN_PRIVATE_KEY"
          mask_secret "$COSIGN_PASSWORD"
          printf '%s' "$COSIGN_PRIVATE_KEY" > cosign.key
          trap 'rm -f cosign.key' EXIT
          cosign sign --key cosign.key "${{ needs.build-image.outputs.image_ref }}@${{ needs.build-image.outputs.image_digest}}"

  validate-externalsecrets:
    name: Validate ExternalSecret Vault Keys
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install pyyaml

      - name: Authenticate to Vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_CI_ROLE_ID }}
          secretId: ${{ secrets.VAULT_CI_SECRET_ID }}
          exportToken: true

      - name: Validate ExternalSecret remote references
        run: python scripts/validate_externalsecret_sources.py deploy/k8s/base/secrets/external-secrets.yaml

  deploy:
    name: Deploy to Linode via Argo CD
    runs-on: ubuntu-latest
    needs:
      - security-and-sign
      - validate-externalsecrets
    steps:
      - name: Install Argo CD CLI
        env:
          ARGOCD_VERSION: v2.9.3
        run: |
          set -euo pipefail
          binary="argocd-linux-amd64"
          base_url="https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}"
          curl --fail --show-error --silent --location --retry 5 --retry-delay 2 --retry-all-errors \
            -o "${binary}" "${base_url}/${binary}"
          curl --fail --show-error --silent --location --retry 5 --retry-delay 2 --retry-all-errors \
            -o cli_checksums.txt "${base_url}/cli_checksums.txt"
          expected_sum="$(grep " ${binary}$" cli_checksums.txt | awk '{print $1}')"
          if [ -z "${expected_sum}" ]; then
            echo "Unable to determine checksum for ${binary}" >&2
            exit 1
          fi
          echo "${expected_sum}  ${binary}" | sha256sum --check --status
          sudo install -m 0755 "${binary}" /usr/local/bin/argocd
          rm -f "${binary}" cli_checksums.txt

      - name: Argo CD login and sync
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
          ARGOCD_APP: ${{ vars.ARGOCD_APP_NAME }}
        run: |
          set -euo pipefail

          if [ -z "${ARGOCD_SERVER:-}" ]; then
            echo "ARGOCD_SERVER secret must be provided" >&2
            exit 1
          fi

          if [ -z "${ARGOCD_USERNAME:-}" ]; then
            echo "ARGOCD_USERNAME secret must be provided" >&2
            exit 1
          fi

          if [ -z "${ARGOCD_PASSWORD:-}" ]; then
            echo "ARGOCD_PASSWORD secret must be provided" >&2
            exit 1
          fi

          if [ -z "${ARGOCD_APP:-}" ]; then
            echo "ARGOCD_APP_NAME environment variable must be provided" >&2
            exit 1
          fi

          mask_secret() {
            if [ -z "$1" ]; then
              return
            fi
            printf '%s' "$1" | while IFS= read -r line; do
              [ -z "$line" ] && continue
              echo "::add-mask::$line"
            done
          }

          mask_secret "$ARGOCD_USERNAME"
          mask_secret "$ARGOCD_PASSWORD"

          argocd login "$ARGOCD_SERVER" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure
          argocd app set "$ARGOCD_APP" --revision "${GITHUB_SHA}"
          argocd app sync "$ARGOCD_APP"
          argocd app wait "$ARGOCD_APP" --health --timeout 600
