name: Deploy to Linode Kubernetes

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  actions: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.workflow_run && github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]
        && github.event.workflow_run.pull_requests[0].number
      || (
        github.event.workflow_run
        && (
          github.event.workflow_run.head_repository
          && github.event.workflow_run.head_repository.full_name
          && github.event.workflow_run.head_repository.full_name != ''
          && format(
            '{0}:{1}',
            github.event.workflow_run.head_repository.full_name,
            (
              github.event.workflow_run.head_branch
              && github.event.workflow_run.head_branch != ''
              && github.event.workflow_run.head_branch
            )
            || github.event.workflow_run.run_number
            || github.event.workflow_run.id
            || github.run_id
          )
          || (
            github.event.workflow_run.repository
            && github.event.workflow_run.repository.full_name
            && github.event.workflow_run.repository.full_name != ''
            && format(
              '{0}:{1}',
              github.event.workflow_run.repository.full_name,
              (
                github.event.workflow_run.head_branch
                && github.event.workflow_run.head_branch != ''
                && github.event.workflow_run.head_branch
              )
              || github.event.workflow_run.run_number
              || github.event.workflow_run.id
              || github.run_id
            )
          )
          || (
            github.event.workflow_run.head_branch
            && github.event.workflow_run.head_branch != ''
            && github.event.workflow_run.head_branch
          )
        )
      )
      || github.event.pull_request && github.event.pull_request.number
      || github.head_ref && github.head_ref != '' && github.head_ref
      || github.ref
      || github.event.workflow_run && github.event.workflow_run.run_number
      || github.event.workflow_run && github.event.workflow_run.id
      || github.run_id
    }}
  cancel-in-progress: true




jobs:
  quality-checks:
    name: Lint, Type Check, and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: >-
            pip-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-${{
              hashFiles(
                '**/requirements.txt',
                '**/requirements-ci.txt',
                'pyproject.toml',
                'poetry.lock'
              )
            }}
          restore-keys: |
            pip-${{ runner.os }}-py${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          python -m pip install ruff black mypy pytest pytest-cov

      - name: Run Ruff
        run: ruff check .

      - name: Run Black
        run: black --check .

      - name: Run Mypy
        run: mypy .

      - name: Run Pytest
        run: pytest --maxfail=1 --disable-warnings --cov=. --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: error

  build-and-publish:
    name: Build, Sign, and Publish Images
    runs-on: ubuntu-latest
    needs: quality-checks
    env:
      REGISTRY: ghcr.io
    strategy:
      matrix:
        build:
          - name: kraken-ws-ingest
            context: deploy/docker/kraken-ws-ingest
            dockerfile: deploy/docker/kraken-ws-ingest/Dockerfile
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Determine image coordinates
        id: image_meta
        run: |
          OWNER="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          IMAGE_ID="${REGISTRY}/${OWNER}/${{ matrix.build.name }}"
          echo "image_id=${IMAGE_ID}" >> "$GITHUB_OUTPUT"
          echo "sha_tag=${IMAGE_ID}:${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "latest_tag=${IMAGE_ID}:latest" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image with Kaniko
        uses: int128/kaniko-action@v1.52.0
        with:
          registry: ${{ env.REGISTRY }}
          image: ${{ steps.image_meta.outputs.image_id }}
          tags: |
            latest
            ${{ github.sha }}
          context: ${{ matrix.build.context }}
          dockerfile: ${{ matrix.build.dockerfile }}
          push: true
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify critical wheels in ${{ matrix.build.name }} image
        run: |
          set -euo pipefail
          docker pull ${{ steps.image_meta.outputs.sha_tag }}
          docker run --rm ${{ steps.image_meta.outputs.sha_tag }} python - <<'PY'
          import importlib
          import json
          import sys

          modules = ["psycopg", "argon2", "cryptography"]
          missing: dict[str, str] = {}
          for name in modules:
              try:
                  importlib.import_module(name)
              except Exception as exc:
                  missing[name] = repr(exc)

          if missing:
              payload = {
                  "event": "missing_critical_modules",
                  "modules": missing,
                  "component": "${{ matrix.build.name }}-image",
              }
              sys.stderr.write(json.dumps(payload) + "\n")
              raise SystemExit(1)

          print("Verified critical Python modules:", ", ".join(modules))
          PY

      - name: Generate SBOM with Syft
        id: sbom
        uses: anchore/sbom-action@v0.20.6
        with:
          image: ${{ steps.image_meta.outputs.sha_tag }}
          format: spdx-json
          output-file: sbom-${{ matrix.build.name }}.spdx.json
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          upload-artifact: false

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.build.name }}
          path: sbom-${{ matrix.build.name }}.spdx.json

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ steps.image_meta.outputs.sha_tag }}
          severity: CRITICAL,HIGH
          format: table
          exit-code: '1'
          ignore-unfixed: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign images with Cosign
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          set -euo pipefail

          if [ -z "$COSIGN_PRIVATE_KEY" ]; then
            echo "COSIGN_PRIVATE_KEY secret must be provided" >&2
            exit 1
          fi

          if [ -z "$COSIGN_PASSWORD" ]; then
            echo "COSIGN_PASSWORD secret must be provided" >&2
            exit 1
          fi

          mask_secret() {
            if [ -z "$1" ]; then
              return
            fi
            printf '%s' "$1" | while IFS= read -r line; do
              [ -z "$line" ] && continue
              echo "::add-mask::$line"
            done
          }

          mask_secret "$COSIGN_PRIVATE_KEY"
          mask_secret "$COSIGN_PASSWORD"

          cosign sign --key env://COSIGN_PRIVATE_KEY "${{ steps.image_meta.outputs.sha_tag }}"
          cosign sign --key env://COSIGN_PRIVATE_KEY "${{ steps.image_meta.outputs.latest_tag }}"

  validate-externalsecrets:
    name: Validate ExternalSecret Vault Keys
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install pyyaml

      - name: Authenticate to Vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_CI_ROLE_ID }}
          secretId: ${{ secrets.VAULT_CI_SECRET_ID }}
          exportToken: true

      - name: Validate ExternalSecret remote references
        run: python scripts/validate_externalsecret_sources.py deploy/k8s/base/secrets/external-secrets.yaml

  deploy:
    name: Deploy with ArgoCD
    runs-on: ubuntu-latest
    needs:
      - build-and-publish
      - validate-externalsecrets
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install ArgoCD CLI
        run: |
          set -euo pipefail
          binary="argocd-linux-amd64"
          base_url="https://github.com/argoproj/argo-cd/releases/download/v2.9.3"
          curl --fail --show-error --silent --location --retry 5 --retry-delay 2 --retry-all-errors \
            --proto '=https' --tlsv1.2 \
            -o "${binary}" "${base_url}/${binary}"
          curl --fail --show-error --silent --location --retry 5 --retry-delay 2 --retry-all-errors \
            --proto '=https' --tlsv1.2 \
            -o cli_checksums.txt "${base_url}/cli_checksums.txt"
          expected_sum="$(grep " ${binary}$" cli_checksums.txt | awk '{print $1}')"
          if [ -z "${expected_sum}" ]; then
            echo "Unable to determine checksum for ${binary}" >&2
            exit 1
          fi
          echo "${expected_sum}  ${binary}" | sha256sum --check --status
          sudo install -m 0755 "${binary}" /usr/local/bin/argocd
          rm -f "${binary}" cli_checksums.txt

      - name: Login to ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
          ARGOCD_CACERT: ${{ secrets.ARGOCD_CACERT }}
        run: |
          set -euo pipefail

          if [ -z "${ARGOCD_SERVER:-}" ]; then
            echo "ARGOCD_SERVER secret must be provided" >&2
            exit 1
          fi

          if [ -z "${ARGOCD_AUTH_TOKEN:-}" ]; then
            echo "ARGOCD_TOKEN secret must be provided" >&2
            exit 1
          fi

          mask_secret() {
            if [ -z "$1" ]; then
              return
            fi
            printf '%s' "$1" | while IFS= read -r line; do
              [ -z "$line" ] && continue
              echo "::add-mask::$line"
            done
          }

          mask_secret "$ARGOCD_AUTH_TOKEN"

          server_url="${ARGOCD_SERVER%/}"
          case "${server_url}" in
            https://*) ;;
            *)
              echo "ARGOCD_SERVER must start with https:// to enforce TLS." >&2
              exit 1
              ;;
          esac

          if printf '%s' "${server_url}" | LC_ALL=C grep -q '[[:space:]]'; then
            echo "ARGOCD_SERVER must not contain whitespace characters." >&2
            exit 1
          fi

          if printf '%s' "${server_url}" | LC_ALL=C grep -q '[[:cntrl:]]'; then
            echo "ARGOCD_SERVER must not contain control characters." >&2
            exit 1
          fi

          host_and_path="${server_url#https://}"
          if [ -z "${host_and_path}" ]; then
            echo "ARGOCD_SERVER must include a hostname." >&2
            exit 1
          fi

          if printf '%s' "${host_and_path}" | grep -q '/'; then
            echo "ARGOCD_SERVER must not include a path component." >&2
            exit 1
          fi

          case "${host_and_path}" in
            *'@'*)
              echo "ARGOCD_SERVER must not include embedded credentials." >&2
              exit 1
              ;;
            *'?'*|*'#'*)
              echo "ARGOCD_SERVER must not include query parameters or fragments." >&2
              exit 1
              ;;
          esac

          cleanup_ca() {
            if [ -n "${1:-}" ] && [ -f "$1" ]; then
              rm -f "$1"
            fi
          }

          ca_file=""
          declare -a login_args
          if [ -n "${ARGOCD_CACERT:-}" ]; then
            ca_file="$(mktemp)"
            trap 'cleanup_ca "${ca_file}"' EXIT
            printf '%s' "${ARGOCD_CACERT}" > "${ca_file}"
            chmod 0600 "${ca_file}"
            login_args+=(--certificate-authority "${ca_file}")
          fi

          argocd login "${host_and_path}" --auth-token "$ARGOCD_AUTH_TOKEN" "${login_args[@]}"

          cleanup_ca "${ca_file}"
          trap - EXIT

      - name: Sync Linode Kubernetes applications
        env:
          STAGING_APP: ${{ secrets.ARGOCD_STAGING_APP }}
          PRODUCTION_APP: ${{ secrets.ARGOCD_PRODUCTION_APP }}
        run: |
          set -euo pipefail

          if [ -z "$STAGING_APP" ] && [ -z "$PRODUCTION_APP" ]; then
            echo "No ArgoCD applications configured" >&2
            exit 1
          fi
          if [ -n "$STAGING_APP" ]; then
            argocd app sync "$STAGING_APP"
            argocd app wait "$STAGING_APP" --health --timeout 600
          fi
          if [ -n "$PRODUCTION_APP" ]; then
            argocd app sync "$PRODUCTION_APP"
            argocd app wait "$PRODUCTION_APP" --health --timeout 600
          fi
