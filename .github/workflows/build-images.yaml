name: Build OCI Images

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'deploy/docker/risk-api/**'
      - 'deploy/docker/risk-ingestor/**'
      - 'deploy/docker/kraken-ws-ingest/**'
      - 'deploy/docker/**'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'services/**'
      - 'common/**'
      - 'src/**'

permissions:
  contents: read
  packages: write
  actions: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.workflow_run && github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]
        && github.event.workflow_run.pull_requests[0].number
      || github.event.workflow_run && github.event.workflow_run.head_branch && github.event.workflow_run.head_branch != ''
        && github.event.workflow_run.head_branch
      || github.event.pull_request && github.event.pull_request.number
      || github.head_ref && github.head_ref != '' && github.head_ref
      || github.ref
      || github.run_id
    }}
  cancel-in-progress: true




jobs:
  kaniko-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine image registry
        id: image-meta
        run: |
          set -euo pipefail
          owner="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          echo "risk_api_tag=ghcr.io/${owner}/risk-api:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "risk_ingestor_tag=ghcr.io/${owner}/risk-ingestor:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
      - name: Build Risk API Image
        uses: int128/kaniko-action@v1.52.0
        with:
          push: true
          context: .
          file: deploy/docker/risk-api/Dockerfile
          tags: |
            ${{ steps.image-meta.outputs.risk_api_tag }}
      - name: Verify critical wheels in Risk API image
        env:
          IMAGE_REF: ${{ steps.image-meta.outputs.risk_api_tag }}
        run: |
          set -euo pipefail
          docker pull "${IMAGE_REF}"
          docker run --rm "${IMAGE_REF}" python - <<'PY'
          import importlib
          import json
          import sys

          modules = ["psycopg", "argon2", "cryptography"]
          missing: dict[str, str] = {}
          for name in modules:
              try:
                  importlib.import_module(name)
              except Exception as exc:
                  missing[name] = repr(exc)

          if missing:
              payload = {
                  "event": "missing_critical_modules",
                  "modules": missing,
                  "component": "risk-api-image",
              }
              sys.stderr.write(json.dumps(payload) + "\n")
              raise SystemExit(1)

          print("Verified critical Python modules:", ", ".join(modules))
          PY
      - name: Build Ingestor Image
        uses: int128/kaniko-action@v1.52.0
        with:
          push: true
          context: .
          file: deploy/docker/risk-ingestor/Dockerfile
          tags: |
            ${{ steps.image-meta.outputs.risk_ingestor_tag }}
      - name: Verify critical wheels in Risk Ingestor image
        env:
          IMAGE_REF: ${{ steps.image-meta.outputs.risk_ingestor_tag }}
        run: |
          set -euo pipefail
          docker pull "${IMAGE_REF}"
          docker run --rm "${IMAGE_REF}" python - <<'PY'
          import importlib
          import json
          import sys

          modules = ["psycopg", "argon2", "cryptography"]
          missing: dict[str, str] = {}
          for name in modules:
              try:
                  importlib.import_module(name)
              except Exception as exc:
                  missing[name] = repr(exc)

          if missing:
              payload = {
                  "event": "missing_critical_modules",
                  "modules": missing,
                  "component": "risk-ingestor-image",
              }
              sys.stderr.write(json.dumps(payload) + "\n")
              raise SystemExit(1)

          print("Verified critical Python modules:", ", ".join(modules))
          PY

      - name: Generate build metadata manifest
        run: |
          cat <<EOF > build-manifest.json
          {
            "commit_sha": "${{ github.sha }}",
            "build_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "change_request_id": "${CHANGE_REQUEST_ID}",
            "compliance_labels": [
              "ISO27001",
              "GDPR"
            ]
          }
          EOF
        env:
          CHANGE_REQUEST_ID: ${{ github.event.pull_request.number || github.run_id }}

      - name: Upload build metadata manifest
        uses: actions/upload-artifact@v4
        with:
          name: build-manifest-${{ github.job }}
          path: build-manifest.json

  buildah-sbom:
    runs-on: ubuntu-latest
    needs: kaniko-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install Buildah
        run: |
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends buildah
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
      - name: Determine image registry
        id: image-meta
        run: |
          set -euo pipefail
          owner="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          echo "risk_api_tag=ghcr.io/${owner}/risk-api:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "risk_ingestor_tag=ghcr.io/${owner}/risk-ingestor:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Download Syft
        uses: anchore/sbom-action/download-syft@v0.20.6
        with:
          syft-version: v1.33.0
      - name: Build Risk API with Buildah
        env:
          IMAGE_REF: ${{ steps.image-meta.outputs.risk_api_tag }}
        run: |
          buildah bud -f deploy/docker/risk-api/Dockerfile -t "${IMAGE_REF}" .
      - name: Build Ingestor with Buildah
        env:
          IMAGE_REF: ${{ steps.image-meta.outputs.risk_ingestor_tag }}
        run: |
          buildah bud -f deploy/docker/risk-ingestor/Dockerfile -t "${IMAGE_REF}" .
      - name: Generate SBOMs
        env:
          RISK_API_REF: ${{ steps.image-meta.outputs.risk_api_tag }}
          RISK_INGESTOR_REF: ${{ steps.image-meta.outputs.risk_ingestor_tag }}
        run: |
          syft "${RISK_API_REF}" -o json > sbom-risk-api.json
          syft "${RISK_INGESTOR_REF}" -o json > sbom-risk-ingestor.json
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: |
            sbom-risk-api.json
            sbom-risk-ingestor.json

      - name: Generate build metadata manifest
        run: |
          cat <<EOF > build-manifest.json
          {
            "commit_sha": "${{ github.sha }}",
            "build_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "change_request_id": "${CHANGE_REQUEST_ID}",
            "compliance_labels": [
              "ISO27001",
              "GDPR"
            ]
          }
          EOF
        env:
          CHANGE_REQUEST_ID: ${{ github.event.pull_request.number || github.run_id }}

      - name: Upload build metadata manifest
        uses: actions/upload-artifact@v4
        with:
          name: build-manifest-${{ github.job }}
          path: build-manifest.json
