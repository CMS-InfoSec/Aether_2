name: Security and Compliance Checks

on:
  push:
    branches:
      - "**"
  pull_request:

permissions:
  contents: read
  actions: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.workflow_run && github.event.workflow_run.pull_requests && github.event.workflow_run.pull_requests[0]
        && github.event.workflow_run.pull_requests[0].number
      || github.event.workflow_run && github.event.workflow_run.head_branch && github.event.workflow_run.head_branch != ''
        && github.event.workflow_run.head_branch
      || github.event.pull_request && github.event.pull_request.number
      || github.head_ref && github.head_ref != '' && github.head_ref
      || github.ref
      || github.event.workflow_run && github.event.workflow_run.id
      || github.run_id
    }}
  cancel-in-progress: true




jobs:
  lint-and-test:
    name: Lint and Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: >-
            pip-${{ runner.os }}-${{
              hashFiles(
                '**/requirements.txt',
                '**/requirements-ci.txt',
                'pyproject.toml',
                'poetry.lock'
              )
            }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then python -m pip install .; fi
          python -m pip install ruff mypy black pytest

      - name: Run Ruff
        run: ruff check .

      - name: Run Black
        run: black --check .

      - name: Run MyPy
        run: mypy .

      - name: Run Pytest
        run: pytest

  pip-audit:
    name: Dependency vulnerability scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: >-
            pip-${{ runner.os }}-${{
              hashFiles(
                '**/requirements.txt',
                '**/requirements-ci.txt',
                'pyproject.toml',
                'poetry.lock'
              )
            }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install pip-audit
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install pip-audit

      - name: Audit locked dependencies
        run: |
          set -euo pipefail
          exit_code=0
          if ! pip-audit \
            --progress-spinner off \
            --config pip-audit.toml \
            --requirement requirements.txt \
            --requirement requirements-ci.txt
          then
            exit_code=$?
          fi

          if [ "$exit_code" -gt 1 ]; then
            exit "$exit_code"
          fi

          if [ "$exit_code" -eq 1 ]; then
            echo "pip-audit reported vulnerabilities that require manual remediation."
            exit 1
          fi

  trivy-scan:
    name: Trivy Container Scan
    runs-on: ubuntu-latest
    needs:
      - lint-and-test
      - pip-audit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: "fs"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"
          exit-code: "1"

  opa-policy-check:
    name: OPA Policy Check
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Conftest
        env:
          CONFTEST_VERSION: v0.63.0
        run: |
          set -euo pipefail
          archive="conftest_${CONFTEST_VERSION#v}_Linux_x86_64.tar.gz"
          checksum_file="checksums.txt"
          base_url="https://github.com/open-policy-agent/conftest/releases/download/${CONFTEST_VERSION}"
          curl --fail --show-error --silent --location --retry 5 --retry-delay 2 --retry-all-errors \
            -o "${archive}" "${base_url}/${archive}"
          curl --fail --show-error --silent --location --retry 5 --retry-delay 2 --retry-all-errors \
            -o "${checksum_file}" "${base_url}/${checksum_file}"
          expected_sum="$(grep " ${archive}$" "${checksum_file}" | awk '{print $1}')"
          if [ -z "${expected_sum}" ]; then
            echo "Unable to determine checksum for ${archive}" >&2
            exit 1
          fi
          echo "${expected_sum}  ${archive}" | sha256sum --check --status
          tar -xzf "${archive}" conftest
          sudo install -m 0755 conftest /usr/local/bin/conftest
          rm -f "${archive}" "${checksum_file}" conftest
          conftest --version

      - name: Run OPA policies against Kubernetes manifests
        run: |
          set -euo pipefail
          if [ ! -d deploy ]; then
            echo "No Kubernetes manifests found to test."
            exit 0
          fi
          if [ -d deploy/k8s/policies ]; then
            rego_policies="$(find deploy/k8s/policies -type f -name '*.rego' -print -quit)"
            if [ -n "$rego_policies" ]; then
              conftest test deploy --policy deploy/k8s/policies
            else
              echo "No Rego policies found in deploy/k8s/policies. Skipping check."
              exit 0
            fi
          else
            echo "No OPA policies found at deploy/k8s/policies. Skipping check."
            exit 0
          fi

  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs:
      - trivy-scan
      - opa-policy-check
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    steps:
      - name: Await manual director approval
        run: |
          echo "Production deployment requires manual director approval via the protected environment."
